ICMP 协议 是一个 IP 网络层协议，全称：Internet Controller Message Protocol 因特网控制消息协议
	
	包括很多工具:
	
		1.主要功能是做网络间联通测试。
	
		2.当网络故障的时候用来报错，提示不可达消息。比如链路三层最大传输数据包的大小，超过会丢包。
		
		3.并且当主机直接通信使用了自由路径的时候，它可以用重定向的功能来为你做路径优化。
		
		+-----------+						+-----------+
		|服务器A 	|						|Internet 	|
		|20.0.0.1/24|						|			|
		+-------|---+						+-------|---+
				|									|
				|									|
		|-------|-----|						|-------|-----|
		|20.0.0.2/24  |						|			  |
		|	 RTA	  |						|	 RTB	  |
		|10.0.0.200/24|						|10.0.0.100/24|
		|-------|-----|						|-------|-----|
				|					------1------->	|
				|-------------------|---------------|
				<------3----------	|<----2 ICMP重定向-
									|
							|-----------------|
							|10.0.0.1/24	  |		主机 A 访问 服务器 A 的过程 先访问网网关再重定向
							|10.0.0.100/24网关|
							|-----------------|
							

						
ICMP 封装格式 		Ethernet_2|IPv4|ICMP|FCS

					0	    7		15			  31
ICMP 数据包格式		|-------|-------|--------------| ICMP 报文内容 不同类型和代码 标识不同内容
					|type	|code	|checksum	   |
					|-------|-------|--------------|
					
ping 工具，通过 ping 可以检测通信数据双方的三层网络的联通性，

	客户端 ping 会发送一个 Echo Request(回声请求) 给主机 Server，
	主机 Server 接到以后，会给你回一个 Echo Reply(回声应答)，Client 收到回声应答说明通了;没有收到回声应答说明失败了。
	参数 -c 指定发送报文的次数 -h 指定最大 ttl 值 -i 指定报文的原地址

	gengqianyu@DESKTOP-NTV32ER:~$ ping draveness.me
	PING draveness.me (34.96.168.17) 56(84) bytes of data.
	64 bytes from 17.168.96.34.bc.googleusercontent.com (34.96.168.17): icmp_seq=1 ttl=110 time=57.1 ms
	64 bytes from 17.168.96.34.bc.googleusercontent.com (34.96.168.17): icmp_seq=2 ttl=110 time=54.4 ms
	64 bytes from 17.168.96.34.bc.googleusercontent.com (34.96.168.17): icmp_seq=3 ttl=110 time=57.6 ms
	64 bytes from 17.168.96.34.bc.googleusercontent.com (34.96.168.17): icmp_seq=4 ttl=110 time=55.3 ms
	64 bytes from 17.168.96.34.bc.googleusercontent.com (34.96.168.17): icmp_seq=5 ttl=110 time=63.9 ms
	^C
	--- draveness.me ping statistics ---
	5 packets transmitted, 5 received, 0% packet loss, time 4007ms
	rtt min/avg/max/mdev = 54.361/57.658/63.872/3.322 ms

	Tracert/traceroute 也可以检测网络链路联通性，同时显示数据包每一跳的 IP 地址。也就是说可以跟踪数据包到达目的地址的完整路径。
	参数 -i 指定报文的原地址	-f 初始 ttl 值 -m 最大 ttl 值			

	gengqianyu@DESKTOP-NTV32ER:~$ traceroute draveness.me
	traceroute to draveness.me (34.96.168.17), 30 hops max, 60 byte packets
	1  bogon (192.168.235.241)  0.886 ms  0.849 ms  0.742 ms
	2  bogon (192.168.1.1)  2.728 ms  2.676 ms  1.820 ms
	3  * * *
	4  60.6.43.1 (60.6.43.1)  5.337 ms * *
	5  * * *
	6  * 219.158.106.165 (219.158.106.165)  48.916 ms  49.018 ms
	7  219.158.97.2 (219.158.97.2)  54.823 ms  53.457 ms 219.158.8.122 (219.158.8.122)  53.583 ms
	8  219.158.97.25 (219.158.97.25)  51.813 ms *  54.931 ms
	9  219.158.10.30 (219.158.10.30)  64.012 ms 219.158.20.94 (219.158.20.94)  61.737 ms 219.158.10.30 (219.158.10.30)  70.182 ms
	10  219.158.33.174 (219.158.33.174)  64.926 ms  67.416 ms  59.265 ms
	11  108.170.241.45 (108.170.241.45)  59.169 ms 108.170.241.108 (108.170.241.108)  52.144 ms 108.170.241.48 (108.170.241.48)  59.111 ms
	12  142.250.39.33 (142.250.39.33)  56.971 ms 142.250.38.225 (142.250.38.225)  58.194 ms 142.250.39.33 (142.250.39.33)  58.209 ms
	13  142.250.63.124 (142.250.63.124)  58.211 ms 142.250.63.140 (142.250.63.140)  54.666 ms 142.250.63.144 (142.250.63.144)  54.665 ms
	14  * * *
	15  * * *
	16  * * *
	17  * * *
	18  * * *
	19  * * *
	20  17.168.96.34.bc.googleusercontent.com (34.96.168.17)  55.370 ms  55.855 ms  55.798 ms

网络内和网络间通信各是什么？
	
	网络内：通信的原目主机在同一个广播域内 网络=广播域 pca----pcb 内网通信不用指网关 pc 能够独立完成,内网通信,Hub(集线器)/Switch(交换机) 负责网络内的数据转发。
	
	网络间：经过 3 层网络设备 MLS, Router, FireWall等的通信 ,Router 负责网络间的数据转发
 
网关 Gateway
	
	就路由器连接一个网络的接口，也就是一个网络的出口 PCA--SW1---R1-----PCB ；R1的的左边接口就是 PCA 的网关
 
ARP 地址解析协议
	
	ARP 协议只存在 Ethernet(以太网) 网中，在其他网络没有,因此该协议是一个数据链路层协议。

	ARP 协议封包格式：Ethernet2|ARP|FCS

	ARP 数据包需要封装成 Ethernet 帧，才能发送， 封装帧的时候，因为客户端主机不知道各个目的主机的 MAC，那么目的 MAC 就是 FF-FF-FF-FF-FF-FF，表示一个广播。

	ARP 数据包格式：
	
				0				 15				  31
				|-----------------|----------------|
				|Hardware Type	  |Protocol Type   | 
				|--------|--------|----------------|
				|Hardware|Protocol|	Operation Code |
				|Length	 |Length  |				   |
				|--------|--------|----------------|
				|	source 	Hardware 	Address	   |					
				|----------------------------------|
				|	source 	Protocol 	Address	   |					
				|----------------------------------|				
				|Destination 	Hardware 	Address|			
				|----------------------------------|
				|Destination 	Protocol 	Address|					
				|----------------------------------|
				
				Hardware Type 硬件类型 网卡 MAC 地址型
				Protocol Type 协议类型 IPv4
				Operation Code IP报文类型是 Request 报文，还是 Reply 报文
				
				
	任何两台主机要进行通信，默认只知道对方的 IP，不知道对方的 MAC 。
	IP 地址是在组网的时候分配的，MAC 地址是网卡出厂的时候烧录的，
	两台主机进行通信，必须得知道对方 3 层 IP 地址，但是 IP 报文必须封装成帧，才能通过数据链路进行发送。
	数据帧封装，必须包含 原目主机的 MAC 地址。因此发送端必须获取到目的主机的 MAC 地址。
	可现实中，包括应用,网络管理员都不关心对方的 MAC 地址,我只知道我自己的 MAC, 这样就很尴尬了。

网络内通信

	PCA----SW1-----PCB
	A 和 B 进行网络内通信，A 知道自己的 IP 和 MAC，和 B 的 IP 地址却不知道 B 的 MAC 地址。
	那怎么样获得 B 的 MAC 呢？
	在 Ethernet 以太网中有一个专门网络控制协议，这个协议就是 ARP 地址解析协议。

	ARP 只干一件事，把为通信的 目的主机的 IP 地址映射到它的 MAC 地址，并添加到本地到 route 路由标中，过程如下：

	1.Client 向目标主机发送 ARP 请求报文， ARP 报文中包含：
	
		.请求者的 MAC 地址
		.请求者的 IP 地址
		
		.被请求者的 MAC 地址(因为不知道 B 的 MAC 所以请求时是 00-00-00-00-00-00)，这里是 ARP 报头封装，这里的目的 MAC 地址是数据载荷的一部分 和 Ethernet 帧报头的目的 MAC 是两回事，Ethernet 帧报头的目的 MAC 是 FF-FF-FF-FF-FF-FF 因为是一个广播。
		.被请求者的 IP 地址

		
	原主机 A 以 Ethernet 广播的形式发送一个 Request，发送的流量会被交换机泛洪转发，交换机会把这股流量复制多份，通过该网络的所有其他接口，每个接口一份发走。
	
	该网络内的所有主机都收到了 ARP 请求，谁该给应答呢？
	
	接受 ARP 的目的主机,只要看报文中最后 1 条信息,被请求者的 IP 地址 和自己的 IP 地址是否一致,就能知道 Client 请求的到底是不是我的 MAC 地址，
	如果一致，将请求者的 IP 和 MAC 绑定成一个 ARP 条目，保存到目的主机的 ARP 缓存表中，然后 Reply ；
	如果不一致，也会将请求者的 IP 和 MAC 绑定成一个 ARP 条目，保存到本机的 ARP 缓存表，然后丢弃消息。
							
	2.主机回复 ARP Reply(应答)报文，应答中也包含了以上的 4 个字段
	
		.请求者的 MAC 地址(目标主机的 MAC)
		.请求者的 IP 地址
		
		.被请求者的 MAC 地址(因为 B 知道 A 的 MAC，真实目的主机的 MAC)
		.被请求者的 IP 地址
		
	B 主机发现一致，绑定了 A 的 IP 和 MAC 组成一条 ARP 条目保存到本地 ARP 表，本地主机也需要知道 Client 的 MAC 地址。
	然后以单播的形式给 Client A 发一个 Reply 应答。
	
	主机 A 收到 B 的应答，会把主机的 B 的 IP 和 MAC 绑定成一个 ARP 条目，保存到本机的 ARP 缓存表中。加完之后双方就可以彼此通信了。
	ARP 缓存表有过期时间，在过期之前，主机 A 每要和主机 B 进行通信。A 都直接查本机的 ARP 缓存表。
	只要有关于 B 的表项，A 就可以基于这个表项的 MAC 地址来封装 A 的帧头。封装完成就可以成功的给 B 发送了
	网络内通信，直接查找 ARP 缓存表，能找到直接封装，没有查到就发送一个 ARP 请求，来进行解析。	
	
注意
	ARP 作为一个 2 层数据链路层协议（应该是L3层协议），报文是不能穿越路由器的，不能被转发到其他广播域。
	数据帧必须先被路由器转发到目标主机所在的网络边界设备，如果边界设备不知道目标主机的 MAC ，才会发送 ARP 广播去解析目标主机的 MAC，再来重新封装数据帧，发给目标主机。
	

网络间通信

	PCA--SW1---R1--sw2---PCC 
	
	A 访问 C 要进行网络间通信，A 就怎么知道是网络间通信啊，A 和 C位于不同网络，A,C 的 IP 地址的 网络位 是不一致的。
	只要 A,C 的 IP 地址不在同一个子网段，A 只要拿自己 IP 和 C 的 IP 分别和自己子网掩码做与运算，分别得到两个网络号，只要两个网络号不一样，就可以断言 A,C 在不同网络。
	
	不在同一网络，A 要和 C 通信，A 就不能搞定。因为 A 只知道自己所在网络的 ARP 缓存表的情况，并不知道其他网络的。
	A 去往 C 的路径有几条，那条最优 A 一概不清楚。谁清楚呢? 路由器清楚。路由器专门负责网络间的数据转发。
	PC 设置 网关 是为了网络间的数据通信。网络内通信网关无意义，要做网络间通信，网关就至关重要。	
	
	A 发送数据帧到路由器 R1，路由器 R1 再查表转发。
	路由器关注的是 3 层报头的目的 IP 地址，因为 MAC 地址只在一个网络内有意义。任何 3 层网络设备,都不能基于 2 层 MAC 地址进行数据转发。
	但是，路由器收到的是数据帧 Ethernet2|IPV4|TCP|HTTP|FCS，那么路由器能看到 IP 地址吗?
	答案是看不到的，因为 R1 收到的是一个数据帧，最外层前面是一个 Ethernet 帧头，后面是 FCS 帧尾。
	
	路由器能看 3 层 IP 地址的唯一前提,是你得能把数据帧的帧头和帧尾去掉。
	那么问题又来了，你什么情况下才能拆帧头帧尾呢，只有一个情况，那就是这个数据帧是发给路由器自身 R1 的时候才可以拆。
	怎样确定这个帧是发给自己的呢，只有当该帧的目的 MAC 地址为 R1 路由器的接口地址的时候，路由器才会认为这个帧是发给自己的，
	然后去掉帧头帧尾，拿到 3 层的目的 IP 地址。
	
	这就是为什么要指网关的意义，当主机 A 要进行网络间通信的时候，主机 A 要拿网关 IP 地址，查看本地的 ARP 缓存表，看看 A 知不知道网关的 IP 地址对应的 MAC。
	如果知道，直接拿网关的 MAC 封装帧，如果不知道为要发送一个 ARP 广播，去解析网关的 MAC 地址。
	
	主机 A 和主机 C 通信的时候，
		SIP：A 的 IP
		DIP：C 的 IP
		SMAC：A 的 MAC
		DMAC：网关 R1 左边接口的 MAC 地址
		
	A 将数据帧发给交换机，交换机很傻，收到数据帧查看 CAN(Controller Area Network) 表发现，目的 MAC 是网关的，它就直接把这个帧发送给网关 R1，
	网关 R1 收到数据帧之后发现 MAC 地址是自己的 MAC，然后 R1 就去掉 2 层帧头帧尾，拿到 3 层的目的 IP，
	发现不对，自己的 IP 地址和目的 IP 地址不一样，数据不是发给我的，原来是想用我的路由表进行转发。
	R1 查询路由表发现，数据包是要发给我右边网络的，然后 R1 会对数据进行重新封装，通过 R1 的右边接口发出。		
	但是数据帧在发出之前，原目 IP 地址不会发生改变；
	原 MAC 地址会改成 R1 右边出口的 MAC地址，目的 MAC 地址 R1 通过查询左边网络的 ARP 缓存表会改成 C 的 MAC 地址，如果没有就发送 ARP 广播解析左边网络的目的 MAC。
	每隔一台路由器原目 MAC 都会改变一次。SW2 接收到帧，查看目的 MAC 地址，对比 CAN 表，将数据转发给 主机 C。

ARP代理
	
	同一网段，不同物理网络上的计算机之间，可以通过 ARP 代理实现相互通信。R 可以开启 ARP 代理。
	
													G0/0/0			 G0/0/1
		[主机A 10.1.0.1/8 网关不设置]---------------------[|R代理|]---------------------[主机A 10.2.0.1/8 网关不设置]		
												10.1.0.2/16 		10.2.0.2/16
												
									    A发送ARP Request请求
										10.2.0.1的 MAC 地址?
									1.--------------------->			
																		R发送ARP Request请求
																		10.2.0.1的 MAC 地址?
																	2.--------------------->
																	
																		主机B 回应 Reply请求
																	3.<---------------------

										路由器 回应 Reply请求
									4.<---------------------	

免费ARP

	免费 ARP 可以用来探测 IP 地址是否冲突，比如增加机器设置 ip 的时候防止 ip 冲突，再比主机环了 ip 地址更换到其他主机上，需要告诉其他主机 IP 和 当前主机 MAC 的映射关系。
    免费 ARP ，请求者是你自己 被请求者也是你自己，广播发出去，网络中其他主机收到广播后，如果被请求的 IP 不是自己，就记录请求者的 IP 和 MAC 映射，做 MAC 地址学习；如果有主机回应就是地址冲突了。


									
查看ARP缓存表

	PS C:\Users\gengqianyu> ARP -a

	接口: 192.168.232.65 --- 0xf
	Internet 地址         物理地址              类型
	192.168.232.79        ff-ff-ff-ff-ff-ff     静态
	224.0.0.2             01-00-5e-00-00-02     静态
	224.0.0.22            01-00-5e-00-00-16     静态
	224.0.0.251           01-00-5e-00-00-fb     静态
	239.255.255.250       01-00-5e-7f-ff-fa     静态
	255.255.255.255       ff-ff-ff-ff-ff-ff     静态

	接口: 192.168.0.101 --- 0x10
	Internet 地址         物理地址              类型
	192.168.0.1           d4-83-04-7b-89-d6     动态
	192.168.0.255         ff-ff-ff-ff-ff-ff     静态
	224.0.0.2             01-00-5e-00-00-02     静态
	224.0.0.22            01-00-5e-00-00-16     静态
	224.0.0.251           01-00-5e-00-00-fb     静态
	224.0.0.252           01-00-5e-00-00-fc     静态
	239.255.255.250       01-00-5e-7f-ff-fa     静态
	255.255.255.255       ff-ff-ff-ff-ff-ff     静态

	接口: 192.168.235.241 --- 0x2d
	Internet 地址         物理地址              类型
	192.168.235.255       ff-ff-ff-ff-ff-ff     静态
	224.0.0.2             01-00-5e-00-00-02     静态
	224.0.0.22            01-00-5e-00-00-16     静态
	224.0.0.251           01-00-5e-00-00-fb     静态
	239.255.255.250       01-00-5e-7f-ff-fa     静态









